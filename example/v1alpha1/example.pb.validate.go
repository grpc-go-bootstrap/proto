// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: example/v1alpha1/example.proto

package examplev1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on HeartbeatRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *HeartbeatRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// HeartbeatRequestValidationError is the validation error returned by
// HeartbeatRequest.Validate if the designated constraints aren't met.
type HeartbeatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeartbeatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeartbeatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeartbeatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeartbeatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeartbeatRequestValidationError) ErrorName() string { return "HeartbeatRequestValidationError" }

// Error satisfies the builtin error interface
func (e HeartbeatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeartbeatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeartbeatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeartbeatRequestValidationError{}

// Validate checks the field values on HeartbeatResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *HeartbeatResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// HeartbeatResponseValidationError is the validation error returned by
// HeartbeatResponse.Validate if the designated constraints aren't met.
type HeartbeatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeartbeatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeartbeatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeartbeatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeartbeatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeartbeatResponseValidationError) ErrorName() string {
	return "HeartbeatResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HeartbeatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeartbeatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeartbeatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeartbeatResponseValidationError{}

// Validate checks the field values on ExamplePostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ExamplePostRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetExample()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExamplePostRequestValidationError{
				field:  "Example",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ExamplePostRequestValidationError is the validation error returned by
// ExamplePostRequest.Validate if the designated constraints aren't met.
type ExamplePostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExamplePostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExamplePostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExamplePostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExamplePostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExamplePostRequestValidationError) ErrorName() string {
	return "ExamplePostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExamplePostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExamplePostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExamplePostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExamplePostRequestValidationError{}

// Validate checks the field values on ExamplePostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ExamplePostResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetExample()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExamplePostResponseValidationError{
				field:  "Example",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ExamplePostResponseValidationError is the validation error returned by
// ExamplePostResponse.Validate if the designated constraints aren't met.
type ExamplePostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExamplePostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExamplePostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExamplePostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExamplePostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExamplePostResponseValidationError) ErrorName() string {
	return "ExamplePostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExamplePostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExamplePostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExamplePostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExamplePostResponseValidationError{}

// Validate checks the field values on ExampleGetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ExampleGetRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ExampleGetRequestValidationError is the validation error returned by
// ExampleGetRequest.Validate if the designated constraints aren't met.
type ExampleGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExampleGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExampleGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExampleGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExampleGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExampleGetRequestValidationError) ErrorName() string {
	return "ExampleGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExampleGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExampleGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExampleGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExampleGetRequestValidationError{}

// Validate checks the field values on ExampleGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ExampleGetResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetExample() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExampleGetResponseValidationError{
					field:  fmt.Sprintf("Example[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ExampleGetResponseValidationError is the validation error returned by
// ExampleGetResponse.Validate if the designated constraints aren't met.
type ExampleGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExampleGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExampleGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExampleGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExampleGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExampleGetResponseValidationError) ErrorName() string {
	return "ExampleGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExampleGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExampleGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExampleGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExampleGetResponseValidationError{}

// Validate checks the field values on ExampleDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ExampleDeleteRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// ExampleDeleteRequestValidationError is the validation error returned by
// ExampleDeleteRequest.Validate if the designated constraints aren't met.
type ExampleDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExampleDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExampleDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExampleDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExampleDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExampleDeleteRequestValidationError) ErrorName() string {
	return "ExampleDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExampleDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExampleDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExampleDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExampleDeleteRequestValidationError{}

// Validate checks the field values on ExampleDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ExampleDeleteResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetExample()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExampleDeleteResponseValidationError{
				field:  "Example",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ExampleDeleteResponseValidationError is the validation error returned by
// ExampleDeleteResponse.Validate if the designated constraints aren't met.
type ExampleDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExampleDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExampleDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExampleDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExampleDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExampleDeleteResponseValidationError) ErrorName() string {
	return "ExampleDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExampleDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExampleDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExampleDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExampleDeleteResponseValidationError{}

// Validate checks the field values on Example with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Example) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Gender

	// no validation rules for PurchaseDate

	return nil
}

// ExampleValidationError is the validation error returned by Example.Validate
// if the designated constraints aren't met.
type ExampleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExampleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExampleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExampleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExampleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExampleValidationError) ErrorName() string { return "ExampleValidationError" }

// Error satisfies the builtin error interface
func (e ExampleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExample.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExampleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExampleValidationError{}
